library standard;

import "Token.fox";

class Parser {
    var tokens;
    var currentTokenIndex,
        currentToken;

    var vars;

    constructor(tokens, vars) {
        this.tokens = tokens;
        this.currentTokenIndex = 0;
        this.currentToken = tokens[0];
        this.vars = vars;
    }

    function leaf() {
        if matches(TokenType.NUMBER) {
            var num = currentToken.content;
            advance();
            return num;
        }

        if matches(TokenType.LPAR) {
            advance();
            var expr = expression();

            if not matches(TokenType.RPAR) {
                print("Expected a )");
                return -1;
            } else: advance();

            return expr;
        }

        if matches(TokenType.IDENTIFIER) {
            var id = currentToken.content;
            advance();

            return vars.get(id);
        }

        print("Did not expect " + currentToken.content);
    }

    function mult_or_divide() {
        var left = leaf();

        while matches(TokenType.MULTIPLY) or matches(TokenType.DIVIDE) {
            var operation = currentToken;
            advance();

            var right = leaf();
            
            left = operation.type == TokenType.MULTIPLY ? left * right : left / right;
        }

        return left;
    }

    function plus_or_minus() {
        var left = mult_or_divide();

        while matches(TokenType.PLUS) or matches(TokenType.MINUS) {
            var operation = currentToken;
            advance();

            var right = mult_or_divide();
            
            left = operation.type == TokenType.PLUS ? left + right : left - right;
        }

        return left;
    }

    function expression() {
        return plus_or_minus();
    }

    function parse() {
        return expression();
    }

    function advance() {
        if currentTokenIndex-1 >= tokens.size():
            return;
        currentTokenIndex++;
        currentToken = tokens[currentTokenIndex];
    }

    function matches(type): currentToken.type == type;
}